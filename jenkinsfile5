pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')// use your docker id
        EC2_SSH_CREDENTIALS = credentials('EC2_SSH_CREDENTIALS') // Replace with your actual credentials ID
        EC2_HOST = 'ec2-13-60-45-151.eu-north-1.compute.amazonaws.com' // Replace with your EC2 instance IP or hostname
        EC2_USER = 'ubuntu' // Replace with your EC2 username (e.g., 'ubuntu' for Ubuntu instances)
    }

    stages {
        stage('Docker Login') {
            steps {
                sh '''
                    echo "$DOCKERHUB_CREDENTIALS_PSW" | docker login -u "$DOCKERHUB_CREDENTIALS_USR" --password-stdin
                '''
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                sh '''
                    docker stop laravel-container || true
                    docker rm laravel-container || true
                    docker rmi st20233418/laravel-php || true
                    docker build -t st20233418/laravel-php .
                    docker push st20233418/laravel-php
                '''
            }
        }

        stage('Deploy to EC2') {
            steps {
                sshagent(['        ']) { // Use the correct ID of your SSH credentials
                    sh '''
                        ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} << 'EOF'
# Update and upgrade packages
sudo apt update && sudo apt upgrade -y

# Install Docker if not installed
if ! command -v docker &> /dev/null
then
    sudo apt install -y docker.io
    sudo systemctl start docker
    sudo systemctl enable docker
    sudo usermod -aG docker ${EC2_USER}
    # Apply group changes
    newgrp docker || true
fi

# Install Ansible if needed
if ! command -v ansible &> /dev/null
then
    sudo apt install -y ansible
fi

# Pull the latest Docker image
docker pull st20233418/laravel-php

# Stop and remove existing container if it exists
docker stop laravel-container || true
docker rm laravel-container || true

# Run the new container
docker run -d --name laravel-container -p 5000:80 st20233418/laravel-php
EOF
                    '''
                }
            }
        }

        stage('Clean') {
            steps {
                echo "Cleaning up..."
                // Uncomment if you need to bring down Docker Compose services
                // sh 'docker compose down'
            }
        }
    }

    post {
        always {
            // Optional: Add any cleanup or notification steps here
            echo "Pipeline completed."
        }
    }
}
